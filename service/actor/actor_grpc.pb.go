// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: service/actor/actor.proto

package actor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ActorService_Create_FullMethodName                     = "/actor.service.actor.ActorService/Create"
	ActorService_Get_FullMethodName                        = "/actor.service.actor.ActorService/Get"
	ActorService_GetAll_FullMethodName                     = "/actor.service.actor.ActorService/GetAll"
	ActorService_GetAllWithFilter_FullMethodName           = "/actor.service.actor.ActorService/GetAllWithFilter"
	ActorService_Update_FullMethodName                     = "/actor.service.actor.ActorService/Update"
	ActorService_Delete_FullMethodName                     = "/actor.service.actor.ActorService/Delete"
	ActorService_AddMovieToFilmography_FullMethodName      = "/actor.service.actor.ActorService/AddMovieToFilmography"
	ActorService_RemoveMovieFromFilmography_FullMethodName = "/actor.service.actor.ActorService/RemoveMovieFromFilmography"
	ActorService_UpdateFilmographyEntry_FullMethodName     = "/actor.service.actor.ActorService/UpdateFilmographyEntry"
)

// ActorServiceClient is the client API for ActorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActorServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	GetAllWithFilter(ctx context.Context, in *GetAllWithFilterRequest, opts ...grpc.CallOption) (*GetAllWithFilterResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// Filmography management
	AddMovieToFilmography(ctx context.Context, in *AddMovieToFilmographyRequest, opts ...grpc.CallOption) (*AddMovieToFilmographyResponse, error)
	RemoveMovieFromFilmography(ctx context.Context, in *RemoveMovieFromFilmographyRequest, opts ...grpc.CallOption) (*RemoveMovieFromFilmographyResponse, error)
	UpdateFilmographyEntry(ctx context.Context, in *UpdateFilmographyEntryRequest, opts ...grpc.CallOption) (*UpdateFilmographyEntryResponse, error)
}

type actorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActorServiceClient(cc grpc.ClientConnInterface) ActorServiceClient {
	return &actorServiceClient{cc}
}

func (c *actorServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, ActorService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, ActorService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, ActorService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorServiceClient) GetAllWithFilter(ctx context.Context, in *GetAllWithFilterRequest, opts ...grpc.CallOption) (*GetAllWithFilterResponse, error) {
	out := new(GetAllWithFilterResponse)
	err := c.cc.Invoke(ctx, ActorService_GetAllWithFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, ActorService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, ActorService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorServiceClient) AddMovieToFilmography(ctx context.Context, in *AddMovieToFilmographyRequest, opts ...grpc.CallOption) (*AddMovieToFilmographyResponse, error) {
	out := new(AddMovieToFilmographyResponse)
	err := c.cc.Invoke(ctx, ActorService_AddMovieToFilmography_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorServiceClient) RemoveMovieFromFilmography(ctx context.Context, in *RemoveMovieFromFilmographyRequest, opts ...grpc.CallOption) (*RemoveMovieFromFilmographyResponse, error) {
	out := new(RemoveMovieFromFilmographyResponse)
	err := c.cc.Invoke(ctx, ActorService_RemoveMovieFromFilmography_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorServiceClient) UpdateFilmographyEntry(ctx context.Context, in *UpdateFilmographyEntryRequest, opts ...grpc.CallOption) (*UpdateFilmographyEntryResponse, error) {
	out := new(UpdateFilmographyEntryResponse)
	err := c.cc.Invoke(ctx, ActorService_UpdateFilmographyEntry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActorServiceServer is the server API for ActorService service.
// All implementations must embed UnimplementedActorServiceServer
// for forward compatibility
type ActorServiceServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error)
	GetAllWithFilter(context.Context, *GetAllWithFilterRequest) (*GetAllWithFilterResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	// Filmography management
	AddMovieToFilmography(context.Context, *AddMovieToFilmographyRequest) (*AddMovieToFilmographyResponse, error)
	RemoveMovieFromFilmography(context.Context, *RemoveMovieFromFilmographyRequest) (*RemoveMovieFromFilmographyResponse, error)
	UpdateFilmographyEntry(context.Context, *UpdateFilmographyEntryRequest) (*UpdateFilmographyEntryResponse, error)
	mustEmbedUnimplementedActorServiceServer()
}

// UnimplementedActorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedActorServiceServer struct {
}

func (UnimplementedActorServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedActorServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedActorServiceServer) GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedActorServiceServer) GetAllWithFilter(context.Context, *GetAllWithFilterRequest) (*GetAllWithFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllWithFilter not implemented")
}
func (UnimplementedActorServiceServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedActorServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedActorServiceServer) AddMovieToFilmography(context.Context, *AddMovieToFilmographyRequest) (*AddMovieToFilmographyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMovieToFilmography not implemented")
}
func (UnimplementedActorServiceServer) RemoveMovieFromFilmography(context.Context, *RemoveMovieFromFilmographyRequest) (*RemoveMovieFromFilmographyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMovieFromFilmography not implemented")
}
func (UnimplementedActorServiceServer) UpdateFilmographyEntry(context.Context, *UpdateFilmographyEntryRequest) (*UpdateFilmographyEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFilmographyEntry not implemented")
}
func (UnimplementedActorServiceServer) mustEmbedUnimplementedActorServiceServer() {}

// UnsafeActorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActorServiceServer will
// result in compilation errors.
type UnsafeActorServiceServer interface {
	mustEmbedUnimplementedActorServiceServer()
}

func RegisterActorServiceServer(s grpc.ServiceRegistrar, srv ActorServiceServer) {
	s.RegisterService(&ActorService_ServiceDesc, srv)
}

func _ActorService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActorService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActorService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActorService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActorService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActorService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorServiceServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActorService_GetAllWithFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllWithFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorServiceServer).GetAllWithFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActorService_GetAllWithFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorServiceServer).GetAllWithFilter(ctx, req.(*GetAllWithFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActorService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActorService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActorService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActorService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActorService_AddMovieToFilmography_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMovieToFilmographyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorServiceServer).AddMovieToFilmography(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActorService_AddMovieToFilmography_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorServiceServer).AddMovieToFilmography(ctx, req.(*AddMovieToFilmographyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActorService_RemoveMovieFromFilmography_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMovieFromFilmographyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorServiceServer).RemoveMovieFromFilmography(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActorService_RemoveMovieFromFilmography_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorServiceServer).RemoveMovieFromFilmography(ctx, req.(*RemoveMovieFromFilmographyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActorService_UpdateFilmographyEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFilmographyEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorServiceServer).UpdateFilmographyEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActorService_UpdateFilmographyEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorServiceServer).UpdateFilmographyEntry(ctx, req.(*UpdateFilmographyEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActorService_ServiceDesc is the grpc.ServiceDesc for ActorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "actor.service.actor.ActorService",
	HandlerType: (*ActorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ActorService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ActorService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _ActorService_GetAll_Handler,
		},
		{
			MethodName: "GetAllWithFilter",
			Handler:    _ActorService_GetAllWithFilter_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ActorService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ActorService_Delete_Handler,
		},
		{
			MethodName: "AddMovieToFilmography",
			Handler:    _ActorService_AddMovieToFilmography_Handler,
		},
		{
			MethodName: "RemoveMovieFromFilmography",
			Handler:    _ActorService_RemoveMovieFromFilmography_Handler,
		},
		{
			MethodName: "UpdateFilmographyEntry",
			Handler:    _ActorService_UpdateFilmographyEntry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/actor/actor.proto",
}
