// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: service/session/session.proto

package session

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SessionService_Create_FullMethodName                 = "/session.service.session.SessionService/Create"
	SessionService_Get_FullMethodName                    = "/session.service.session.SessionService/Get"
	SessionService_GetAll_FullMethodName                 = "/session.service.session.SessionService/GetAll"
	SessionService_GetAllWithFilter_FullMethodName       = "/session.service.session.SessionService/GetAllWithFilter"
	SessionService_GetByMovieID_FullMethodName           = "/session.service.session.SessionService/GetByMovieID"
	SessionService_GetByCinemaHallID_FullMethodName      = "/session.service.session.SessionService/GetByCinemaHallID"
	SessionService_GetByTimeRange_FullMethodName         = "/session.service.session.SessionService/GetByTimeRange"
	SessionService_GetAvailableSessions_FullMethodName   = "/session.service.session.SessionService/GetAvailableSessions"
	SessionService_Update_FullMethodName                 = "/session.service.session.SessionService/Update"
	SessionService_UpdateSeatAvailability_FullMethodName = "/session.service.session.SessionService/UpdateSeatAvailability"
	SessionService_ChangeStatus_FullMethodName           = "/session.service.session.SessionService/ChangeStatus"
	SessionService_Delete_FullMethodName                 = "/session.service.session.SessionService/Delete"
)

// SessionServiceClient is the client API for SessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	GetAllWithFilter(ctx context.Context, in *GetAllWithFilterRequest, opts ...grpc.CallOption) (*GetAllWithFilterResponse, error)
	GetByMovieID(ctx context.Context, in *GetByMovieIDRequest, opts ...grpc.CallOption) (*GetByMovieIDResponse, error)
	GetByCinemaHallID(ctx context.Context, in *GetByCinemaHallIDRequest, opts ...grpc.CallOption) (*GetByCinemaHallIDResponse, error)
	GetByTimeRange(ctx context.Context, in *GetByTimeRangeRequest, opts ...grpc.CallOption) (*GetByTimeRangeResponse, error)
	GetAvailableSessions(ctx context.Context, in *GetAvailableSessionsRequest, opts ...grpc.CallOption) (*GetAvailableSessionsResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	UpdateSeatAvailability(ctx context.Context, in *UpdateSeatAvailabilityRequest, opts ...grpc.CallOption) (*UpdateSeatAvailabilityResponse, error)
	ChangeStatus(ctx context.Context, in *ChangeStatusRequest, opts ...grpc.CallOption) (*ChangeStatusResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type sessionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionServiceClient(cc grpc.ClientConnInterface) SessionServiceClient {
	return &sessionServiceClient{cc}
}

func (c *sessionServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, SessionService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, SessionService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, SessionService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) GetAllWithFilter(ctx context.Context, in *GetAllWithFilterRequest, opts ...grpc.CallOption) (*GetAllWithFilterResponse, error) {
	out := new(GetAllWithFilterResponse)
	err := c.cc.Invoke(ctx, SessionService_GetAllWithFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) GetByMovieID(ctx context.Context, in *GetByMovieIDRequest, opts ...grpc.CallOption) (*GetByMovieIDResponse, error) {
	out := new(GetByMovieIDResponse)
	err := c.cc.Invoke(ctx, SessionService_GetByMovieID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) GetByCinemaHallID(ctx context.Context, in *GetByCinemaHallIDRequest, opts ...grpc.CallOption) (*GetByCinemaHallIDResponse, error) {
	out := new(GetByCinemaHallIDResponse)
	err := c.cc.Invoke(ctx, SessionService_GetByCinemaHallID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) GetByTimeRange(ctx context.Context, in *GetByTimeRangeRequest, opts ...grpc.CallOption) (*GetByTimeRangeResponse, error) {
	out := new(GetByTimeRangeResponse)
	err := c.cc.Invoke(ctx, SessionService_GetByTimeRange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) GetAvailableSessions(ctx context.Context, in *GetAvailableSessionsRequest, opts ...grpc.CallOption) (*GetAvailableSessionsResponse, error) {
	out := new(GetAvailableSessionsResponse)
	err := c.cc.Invoke(ctx, SessionService_GetAvailableSessions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, SessionService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) UpdateSeatAvailability(ctx context.Context, in *UpdateSeatAvailabilityRequest, opts ...grpc.CallOption) (*UpdateSeatAvailabilityResponse, error) {
	out := new(UpdateSeatAvailabilityResponse)
	err := c.cc.Invoke(ctx, SessionService_UpdateSeatAvailability_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) ChangeStatus(ctx context.Context, in *ChangeStatusRequest, opts ...grpc.CallOption) (*ChangeStatusResponse, error) {
	out := new(ChangeStatusResponse)
	err := c.cc.Invoke(ctx, SessionService_ChangeStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, SessionService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionServiceServer is the server API for SessionService service.
// All implementations must embed UnimplementedSessionServiceServer
// for forward compatibility
type SessionServiceServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error)
	GetAllWithFilter(context.Context, *GetAllWithFilterRequest) (*GetAllWithFilterResponse, error)
	GetByMovieID(context.Context, *GetByMovieIDRequest) (*GetByMovieIDResponse, error)
	GetByCinemaHallID(context.Context, *GetByCinemaHallIDRequest) (*GetByCinemaHallIDResponse, error)
	GetByTimeRange(context.Context, *GetByTimeRangeRequest) (*GetByTimeRangeResponse, error)
	GetAvailableSessions(context.Context, *GetAvailableSessionsRequest) (*GetAvailableSessionsResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	UpdateSeatAvailability(context.Context, *UpdateSeatAvailabilityRequest) (*UpdateSeatAvailabilityResponse, error)
	ChangeStatus(context.Context, *ChangeStatusRequest) (*ChangeStatusResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedSessionServiceServer()
}

// UnimplementedSessionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSessionServiceServer struct {
}

func (UnimplementedSessionServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSessionServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSessionServiceServer) GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedSessionServiceServer) GetAllWithFilter(context.Context, *GetAllWithFilterRequest) (*GetAllWithFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllWithFilter not implemented")
}
func (UnimplementedSessionServiceServer) GetByMovieID(context.Context, *GetByMovieIDRequest) (*GetByMovieIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByMovieID not implemented")
}
func (UnimplementedSessionServiceServer) GetByCinemaHallID(context.Context, *GetByCinemaHallIDRequest) (*GetByCinemaHallIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByCinemaHallID not implemented")
}
func (UnimplementedSessionServiceServer) GetByTimeRange(context.Context, *GetByTimeRangeRequest) (*GetByTimeRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByTimeRange not implemented")
}
func (UnimplementedSessionServiceServer) GetAvailableSessions(context.Context, *GetAvailableSessionsRequest) (*GetAvailableSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableSessions not implemented")
}
func (UnimplementedSessionServiceServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSessionServiceServer) UpdateSeatAvailability(context.Context, *UpdateSeatAvailabilityRequest) (*UpdateSeatAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeatAvailability not implemented")
}
func (UnimplementedSessionServiceServer) ChangeStatus(context.Context, *ChangeStatusRequest) (*ChangeStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeStatus not implemented")
}
func (UnimplementedSessionServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSessionServiceServer) mustEmbedUnimplementedSessionServiceServer() {}

// UnsafeSessionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionServiceServer will
// result in compilation errors.
type UnsafeSessionServiceServer interface {
	mustEmbedUnimplementedSessionServiceServer()
}

func RegisterSessionServiceServer(s grpc.ServiceRegistrar, srv SessionServiceServer) {
	s.RegisterService(&SessionService_ServiceDesc, srv)
}

func _SessionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_GetAllWithFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllWithFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).GetAllWithFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_GetAllWithFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).GetAllWithFilter(ctx, req.(*GetAllWithFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_GetByMovieID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByMovieIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).GetByMovieID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_GetByMovieID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).GetByMovieID(ctx, req.(*GetByMovieIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_GetByCinemaHallID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByCinemaHallIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).GetByCinemaHallID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_GetByCinemaHallID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).GetByCinemaHallID(ctx, req.(*GetByCinemaHallIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_GetByTimeRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByTimeRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).GetByTimeRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_GetByTimeRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).GetByTimeRange(ctx, req.(*GetByTimeRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_GetAvailableSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).GetAvailableSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_GetAvailableSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).GetAvailableSessions(ctx, req.(*GetAvailableSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_UpdateSeatAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeatAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).UpdateSeatAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_UpdateSeatAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).UpdateSeatAvailability(ctx, req.(*UpdateSeatAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_ChangeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).ChangeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_ChangeStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).ChangeStatus(ctx, req.(*ChangeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SessionService_ServiceDesc is the grpc.ServiceDesc for SessionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SessionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "session.service.session.SessionService",
	HandlerType: (*SessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SessionService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SessionService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _SessionService_GetAll_Handler,
		},
		{
			MethodName: "GetAllWithFilter",
			Handler:    _SessionService_GetAllWithFilter_Handler,
		},
		{
			MethodName: "GetByMovieID",
			Handler:    _SessionService_GetByMovieID_Handler,
		},
		{
			MethodName: "GetByCinemaHallID",
			Handler:    _SessionService_GetByCinemaHallID_Handler,
		},
		{
			MethodName: "GetByTimeRange",
			Handler:    _SessionService_GetByTimeRange_Handler,
		},
		{
			MethodName: "GetAvailableSessions",
			Handler:    _SessionService_GetAvailableSessions_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SessionService_Update_Handler,
		},
		{
			MethodName: "UpdateSeatAvailability",
			Handler:    _SessionService_UpdateSeatAvailability_Handler,
		},
		{
			MethodName: "ChangeStatus",
			Handler:    _SessionService_ChangeStatus_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SessionService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/session/session.proto",
}
